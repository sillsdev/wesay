<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' == '' And '$(RootDir)'==''">$(MSBuildProjectDirectory)/..</RootDir>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' != ''">$(teamcity_build_checkoutDir)</RootDir>
	</PropertyGroup>

	<Import Project="$(RootDir)/build/build.common.proj" />
	<Import Project="$(RootDir)/build/NuGet.targets"/>

	<UsingTask TaskName="StampAssemblies" AssemblyFile="$(RootDir)/build/SIL.BuildTasks.dll" />
	<UsingTask TaskName="Split" AssemblyFile="$(RootDir)/build/SIL.BuildTasks.dll" />
	<UsingTask TaskName="Archive" AssemblyFile="$(RootDir)/build/SIL.BuildTasks.dll" />
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(RootDir)/build/SIL.BuildTasks.dll" />
	<UsingTask TaskName="RegexReplace" AssemblyFile="$(RootDir)/src/packages/MSBuildTasks.1.5.0.235/tools/MSBuild.Community.Tasks.dll" />

	<PropertyGroup>
		<Solution>WeSay VS2010.sln</Solution>
		<SolutionPath>$(RootDir)/src/$(Solution)</SolutionPath>
		<ApplicationName>WeSay</ApplicationName>
		<ApplicationNameLC Condition="'$(ApplicationNameLC)' == ''">wesay</ApplicationNameLC>
		<Configuration>Debug</Configuration>
		<Constants>$(LifeCycleStage)</Constants>
		<MONO_PREFIX Condition="'$(MONO_PREFIX)'==''">/usr</MONO_PREFIX>
	</PropertyGroup>

	<PropertyGroup>
		<OutputDir>$(RootDir)/output/$(Configuration)</OutputDir>
	</PropertyGroup>

	<Target Name="Build">
		<CallTarget Targets="Clean"/>
		<CallTarget Targets="SetAssemblyVersion"/>
		<CallTarget Targets="Compile"/>
		<Message Text="Build Complete"/>
	</Target>

	<ItemGroup>
		<ExistingObjectFiles
			Include="$(RootDir)/output/$(Configuration)/**/*"
			Exclude="$(RootDir)/.hg/**/*;$(RootDir)/.git/**/*"
		/>
	</ItemGroup>
	<Target Name="Clean">
		<Exec Command="find $(RootDir)/src %5c( -name obj -o -name bin %5c) -type d -print0 | xargs -0 rm -rf" WorkingDirectory="$(RootDir)" />
		<Delete Files="@(ExistingObjectFiles)" />
	</Target>

	<Target Name="Compile" DependsOnTargets="RestorePackages;UnzipMercurial;CopyFiles">
		<MSBuild
			Projects="$(RootDir)\src\$(Solution)"
			Targets="Build"
			Properties="Configuration=$(Configuration);Constants=$(Constants)" />
		<Exec Condition="'$(action)' == 'test'"
			Command="$(MONO_PREFIX)/bin/mono --debug $(MONO_PREFIX)/lib/mono/4.0/nunit-console.exe -noshadow -exclude=SkipOnTeamCity [!P]*.Tests.dll -xml=WeSay.nunit-output.xml"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Timeout="4500000"/>
	</Target>

	<Target Name="Test" DependsOnTargets="Build; UnzipMercurial">
		<CallTarget Targets="TestOnly"/>
	</Target>

	<Target Name="TestOnly">
		<PropertyGroup>
			<NUnitVersion>2.6.4</NUnitVersion>
			<NUnitRunnerPackage>$(RootDir)/src/packages/NUnit.Runners.Net4.$(NUnitVersion)</NUnitRunnerPackage>
		</PropertyGroup>
		<ItemGroup>
			<TestAssemblies
				Include="$(RootDir)/output/$(Configuration)/*.Tests.dll"
				Exclude="$(RootDir)/output/$(Configuration)/SIL.*.Tests.dll"/>
			<NUnitAddinFiles Include="$(teamcity_dotnet_nunitaddin)-$(NUnitVersion).*" />
		</ItemGroup>

		<Message Text="TestOnly RootDir: $(RootDir)" Importance="high"/>
		<Message Text="TestOnly NUnitRunnerPackage: $(NUnitRunnerPackage)" Importance="high"/>
		<MakeDir Directories="$(NUnitRunnerPackage)/tools/addins"
			Condition="'$(teamcity_version)' != ''"/>
		<Copy SourceFiles="@(NUnitAddinFiles)" DestinationFolder="$(NUnitRunnerPackage)/tools/addins"
			Condition="'$(teamcity_version)' != ''"/>
		<NUnit Assemblies="@(TestAssemblies)"
			ToolPath="$(NUnitRunnerPackage)/tools"
			TestInNewThread="false"
			ExcludeCategory="$(ExtraExcludeCategories)$(excludedCategories)"
			WorkingDirectory="$(RootDir)/output"
			Force32Bit="$(useNUnit-x86)"
			Verbose="true"
			Timeout="4500000"
			OutputXmlFile="$(RootDir)/output/$(Configuration)/TestResults.xml"/>
		<Message Text="##teamcity[importData type='nunit' path='$(RootDir)/output/$(Configuration)/TestResults.xml']"
			Condition="'$(teamcity_version)' != '' and '$(OS)'!='Windows_NT'"/>
	</Target>



	<Target Name="CopyFiles">
		<ItemGroup>
			<ExistingLibraryFiles Include="$(RootDir)/lib/$(Configuration)/*.config" />
			<ExistingLibraryFiles Include="$(RootDir)/lib/$(Configuration)/*.mdb" />
			<ExistingLibraryFiles Include="$(RootDir)/build/mono/chorusmerge" />
			<ExistingLibraryFiles Include="$(GeckoDir)/lib/net40/*.dll" />
			<ExistingLibraryFiles Include="$(GeckoDir)/lib/net40/*.mdb" />
			<ExistingLibraryFiles Include="$(GeckoDir)/build/*.config" />
			<FirefoxFiles Include="$(GeckoDir)/content/Firefox-Linux$(Architecture)/*.*" />
		</ItemGroup>
		<Copy SourceFiles="@(ExistingLibraryFiles)" DestinationFolder="$(OutputDir)" />
		<Copy SourceFiles="@(FirefoxFiles)" DestinationFolder="$(OutputDir)/Firefox" />
		<Exec Command="chmod 755 $(OutputDir)/chorusmerge" />
	</Target>

	<!-- Install -->
	<!-- The Install Target must be called from an MSBuild task so as to include the output from the previous MSBuild in the ItemGroup below -->
	<ItemGroup>
		<ExecutableFiles Include="$(OutputDir)/*;$(RootDir)/environ*" Exclude="$(OutputDir)/*Tests.dll;$(OutputDir)/*Test.dll;$(OutputDir)/*Test.dll.*;$(OutputDir)/*Tests.dll.*;$(OutputDir)/Addin.LiftReports.dll;$(OutputDir)/NVelocity.dll;$(OutputDir)/SIL.Archiving*;$(OutputDir)/LibChorus.TestUtilities.*" />
		<RuntimeLibraryFiles Include="$(OutputDir)/runtimes/linux-x64/*" />
		<Mercurial Include="$(RootDir)/src/Mercurial/**/*"
			Exclude="$(RootDir)/src/Mercurial/**/*.pyc;$(RootDir)/src/Mercurial/doc/**/*" />
		<MercurialExtensions Include="$(RootDir)/src/MercurialExtensions/**/*" Exclude="$(RootDir)/src/MercurialExtensions/**/*.pyc;$(RootDir)/src/MercurialExtensions/Dummy.txt;$(MercurialExtensions)/MercurialExtensions/**/.guidsForInstaller.xml" />
		<CommonFiles Include="$(RootDir)/common/**/*" Exclude="$(RootDir)/common/Chorus_Help.chm" />
		<!-- HACK: Chorus looks for its help file in the InstallApp directory instead of InstallData directory.  JasonNaylor told me not to change that. Sigh... Chris Hubbard-->
		<ChorusHelpFiles Include="$(RootDir)/common/Chorus_Help.chm" />
		<TemplateFiles Include="$(RootDir)/templates/**/*" />
		<IconFiles Include="$(IconPath)/**/*" />
		<XulRunnerFiles Include="$(OutputDir)/Firefox/*" />
	</ItemGroup>
	<PropertyGroup>
		<InstallUsrBin>$(InstallDir)/bin</InstallUsrBin>
		<InstallApp>$(InstallDir)/lib/$(ApplicationNameLC)</InstallApp>
		<InstallMercurial>$(InstallDir)/lib/$(ApplicationNameLC)/Mercurial</InstallMercurial>
		<InstallMercurialExtensions>$(InstallDir)/lib/$(ApplicationNameLC)/MercurialExtensions</InstallMercurialExtensions>
		<InstallData>$(InstallDir)/share/$(ApplicationNameLC)</InstallData>
		<InstallIcon>$(InstallDir)/share/icons</InstallIcon>
		<InstallXulRunner>$(InstallDir)/lib/$(ApplicationNameLC)/Firefox</InstallXulRunner>
		<IconPath>$(RootDir)/src/Installer_Linux/icons/</IconPath>
	</PropertyGroup>
	<Target Name="Install">
		<Copy
			DestinationFolder="$(InstallApp)"
			SourceFiles="@(ExecutableFiles)"
		/>
		<Copy
			DestinationFolder="$(InstallApp)/runtimes/linux-x64"
			SourceFiles="@(RuntimeLibraryFiles)"
		/>
		<Copy
			DestinationFolder="$(InstallApp)"
			SourceFiles="@(ChorusHelpFiles)"
		/>
		<Copy
			SourceFiles="@(Mercurial)"
			DestinationFolder="$(InstallMercurial)/%(RecursiveDir)"
		/>
		<Copy
			SourceFiles="@(MercurialExtensions)"
			DestinationFolder="$(InstallMercurialExtensions)/%(RecursiveDir)"
		/>
		<Copy
			SourceFiles="@(CommonFiles)"
			DestinationFolder="$(InstallData)/%(RecursiveDir)"
		/>
		<Copy
			SourceFiles="@(TemplateFiles)"
			DestinationFolder="$(InstallData)/templates/%(RecursiveDir)"
		/>
		<Copy
			SourceFiles="@(XulRunnerFiles)"
			DestinationFolder="$(InstallXulRunner)/%(RecursiveDir)"
		/>
		<!-- Copy (and rename) icon files -->
		<RegexReplace Input="@(IconFiles->'%(RecursiveDir)/%(FileName)%(Extension)')" Expression="wesay" Replacement="$(ApplicationNameLC)">
			<Output TaskParameter="Output" ItemName="NewIconFiles"/>
		</RegexReplace>
		<Copy
			SourceFiles="@(IconFiles)"
			DestinationFiles="@(NewIconFiles->'$(InstallIcon)/%(RecursiveDir)/%(FileName)%(Extension)')"
			SkipUnchangedFiles="true"
		/>
	</Target>

</Project>
